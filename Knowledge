- React is a Frontend-Framework
- React is component-based and state-driven
- its a JS library (actually so, its no framework)

NOTE: before learning NEXT.js -> React learning has to be done 

- with React we never touch the DOM (there is where we use STATE)
- in cases where we can NOT use if/else statements -> we use ternaries (operator)  
          const bla = number > 100 ?  'over 100' : 'under 100';


A Frontend Framework is there for keeping the frontend/UI in sync with the data. -> (with plain vanilla JS this is way to hard)

"DATA synchronizing with the UI"


Frontend Frameworks enforce us to write code in a STRUCTURED way ("structured apps")



üëâ React (Documentation that you should keep open at all times)

üëâ Create React App (This is how we'll setup our first app)

üëâ Vite: Getting Started (For real-world React apps)

üëâ Adding React URL to an HTML Document (For the "Pure React" lecture)



NOTE:

in -stric mode- we got redering two times -> thats why we get 2 times console log for example

// React v18
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);




          2 WAYS TO SETUP A REACT PROJECT
          _______________________________


CREATE-REACT-APP                         VITE
________________                         ____

‚ùå not recommended for           ‚úÖ for real-world projects
real-world projects

‚úÖ (just for learning)




          CREATING A NEW REACT APP
          ________________________

1. Terminal
2. go to the folder, where the app should be
3. command  in terminal: npx create-react-app@5 folder-name  // @5 is maybe not neccessary





          SETUP
          _____

1. create- index.js -file


import React from "react";
import ReactDOM from "react-dom/client";

function App() {
  return <h1>Hello React!</h1>;
}

// React v18
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>);




REACT is all about:
___________________


          COMPONENTS
          __________

"Components are just JS FUNCTIONS!"

-> SO WE USE COMPONENTS WITH RIDING FUNCTION!

"In React we try to devide UI into components"

- components are building blocks of UI (button, inputs fields etc.)

- we nest component inside each other

- so we have a "component tree"

- we can reuse(reasusability) components



function App() {
  return (
  <div>
    <h1>Hello React!</h1>
    <Pizza />
  </div>
  );
}

function Pizza() {
  return <h2>Pizza</h2>
}



NOTE:

we can just return one element per component

-> to use more elements -> we have to use a div like above


NEVER NEST FUNCTION INTO OTHER FUNCTION !





- Piece of date = Piece of state





          CONCEPS
          _______

STATE
_____

Most fundamental concept of react = STATE

Whenever we change something in the UI ->  we use STATE

NOTE:

we never touch the DOM with React







Effect : ...



A Convention in React is to name comonents in UpperCase!



          IMPORT REACT INTO A HTML FILE
          _____________________________

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
  <body>
    <div id="root"></div>

    <!-- import REACT (including react library as a script)-->
    <!-- https://gist.githubusercontent.com/gaearon/0275b1e1518599bbeafcde4722e79ed1/raw/db72dcbf3384ee1708c4a07d3be79860db04bff0/example.html -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  </body>
</html>




          PROPS
          _____




          JSX
          ___

- is an extension of JS

- describe the UI based on PROPS and STATE





